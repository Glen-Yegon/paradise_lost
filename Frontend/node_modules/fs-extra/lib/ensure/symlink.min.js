"use strict";const u=require("universalify").fromPromise,path=require("path"),fs=require("../fs"),{mkdirs:mkdirs,mkdirsSync:mkdirsSync}=require("../mkdirs"),{symlinkPaths:symlinkPaths,symlinkPathsSync:symlinkPathsSync}=require("./symlink-paths"),{symlinkType:symlinkType,symlinkTypeSync:symlinkTypeSync}=require("./symlink-type"),{pathExists:pathExists}=require("../path-exists"),{areIdentical:areIdentical}=require("../util/stat");async function createSymlink(t,s,i){let n;try{n=await fs.lstat(s)}catch{}if(n&&n.isSymbolicLink()){const[i,n]=await Promise.all([fs.stat(t),fs.stat(s)]);if(areIdentical(i,n))return}const e=await symlinkPaths(t,s);t=e.toDst;const a=await symlinkType(e.toCwd,i),y=path.dirname(s);return await pathExists(y)||await mkdirs(y),fs.symlink(t,s,a)}function createSymlinkSync(t,s,i){let n;try{n=fs.lstatSync(s)}catch{}if(n&&n.isSymbolicLink()){const i=fs.statSync(t),n=fs.statSync(s);if(areIdentical(i,n))return}const e=symlinkPathsSync(t,s);t=e.toDst,i=symlinkTypeSync(e.toCwd,i);const a=path.dirname(s);return fs.existsSync(a)||mkdirsSync(a),fs.symlinkSync(t,s,i)}module.exports={createSymlink:u(createSymlink),createSymlinkSync:createSymlinkSync};