var isMergeable=require("./is-mergeable"),optimizeProperties=require("./properties/optimize"),sortSelectors=require("../level-1/sort-selectors"),tidyRules=require("../level-1/tidy-rules"),OptimizationLevel=require("../../options/optimization-level").OptimizationLevel,serializeBody=require("../../writer/one-time").body,serializeRules=require("../../writer/one-time").rules,Token=require("../../tokenizer/token");function mergeAdjacent(e,i){for(var r=[null,[],[]],t=i.options,l=t.compatibility.selectors.adjacentSpace,o=t.level[OptimizationLevel.One].selectorsSortingMethod,s=t.compatibility.selectors.mergeablePseudoClasses,a=t.compatibility.selectors.mergeablePseudoElements,n=t.compatibility.selectors.mergeLimit,p=t.compatibility.selectors.multiplePseudoMerging,u=0,m=e.length;u<m;u++){var c=e[u];c[0]==Token.RULE?r[0]==Token.RULE&&serializeRules(c[1])==serializeRules(r[1])?(Array.prototype.push.apply(r[2],c[2]),optimizeProperties(r[2],!0,!0,i),c[2]=[]):r[0]==Token.RULE&&serializeBody(c[2])==serializeBody(r[2])&&isMergeable(serializeRules(c[1]),s,a,p)&&isMergeable(serializeRules(r[1]),s,a,p)&&r[1].length<n?(r[1]=tidyRules(r[1].concat(c[1]),!1,l,!1,i.warnings),r[1]=r.length>1?sortSelectors(r[1],o):r[1],c[2]=[]):r=c:r=[null,[],[]]}}module.exports=mergeAdjacent;